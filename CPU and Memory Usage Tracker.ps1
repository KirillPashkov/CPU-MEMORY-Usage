<#
    .NOTES
    --------------------------------------------------------------------------------
     Generated on:       16.05.2016 14:32
     Generated by:       Kirill Pashkov
    --------------------------------------------------------------------------------
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

function Main
{
	Param ([String]$Commandline)
	$script:Dictionary = New-Object System.Collections.Specialized.StringDictionary
	Convert-CommandLineToDictionary -Dictionary $script:Dictionary -CommandLine $Commandline -ParamIndicator '-'
	if ($CommandLine.Contains("""/?"""))
	{
		$help = 'Parameters:'
		$help += "`n"
		$help += "`n"
		$help += '-memts [int] to set memory% tracking threshold, default 50'
		$help += "`n"
		$help += '-cputs [int] to set cpu% tracking threshold, default 50'
		$help += "`n"
		$help += '-tm [bool] to set topmost property on startup, default true'
		$help += "`n"
		$help += '-pc [string] to set target computer name for tracking, default localhost'
		$help += "`n"
		$help += '-showpc [string] to show target computer name for tracking, default false'
		$help += "`n"
		$help += '-ref [int] to set check ms interval from 1000 to 60000, default 3000'
		$help += "`n"
		$help += '-fc [color] to set text color for values under treshold, default ControlLightLight'
		$help += "`n"
		$help += "`n"
		$help += 'Example:'
		$help += "`n"
		$help += "`n"
		$help += "app.exe -memts 80 -cputs 70 -tm false -pc localhost -showpc true -ref 5000 -fc Azure"
		Write-Host $help
	}

	if ((Call-MainForm_psf) -eq "OK")
	{
		
	}
	$global:ExitCode = 0
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$labelpc = New-Object 'System.Windows.Forms.Label'
	$labelInitializing = New-Object 'System.Windows.Forms.Label'
	$labelCPU7_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU7 = New-Object 'System.Windows.Forms.Label'
	$labelCPU6_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU6 = New-Object 'System.Windows.Forms.Label'
	$labelCPU5_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU5 = New-Object 'System.Windows.Forms.Label'
	$labelCPU4_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU4 = New-Object 'System.Windows.Forms.Label'
	$labelCPU3_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU3 = New-Object 'System.Windows.Forms.Label'
	$labelCPU2_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU2 = New-Object 'System.Windows.Forms.Label'
	$labelCPU1_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU1 = New-Object 'System.Windows.Forms.Label'
	$labelMEM_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU0_Value = New-Object 'System.Windows.Forms.Label'
	$labelCPU0 = New-Object 'System.Windows.Forms.Label'
	$labelMEM = New-Object 'System.Windows.Forms.Label'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$timer_cpu = New-Object 'System.Windows.Forms.Timer'
	$timer_mem = New-Object 'System.Windows.Forms.Timer'
	$timerFadeIn = New-Object 'System.Windows.Forms.Timer'
	$notifyicon = New-Object 'System.Windows.Forms.NotifyIcon'
	$contextmenustrip = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$onTopToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$closeToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$imagelist = New-Object 'System.Windows.Forms.ImageList'
	$releaseLockToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$showValuesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Set-CommandLineParameters
	$formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		Stop-JobTracker
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
		[gc]::Collect()
	}
	
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			$members = @{
				"Job" = $Job;
				"CompleteScript" = $CompletedScript;
				"UpdateScript" = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		$timerJobTracker.Stop()
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						if ($psObject.CompleteScript -ne $null)
						{
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index--
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index--
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start()
		}
	}
	
	function Stop-JobTracker
	{
		$timerJobTracker.Stop()
		
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	
	$timer_cpu_Tick = {
		Add-JobTracker -Name 'CPU' `
					   -JobScript {
			param ($computername)
			$wmi_cpu = Get-WmiObject Win32_Processor -ComputerName $computername
			$wmi_cpu | % { New-Object PSObject -Property @{ DeviceId = $_.DeviceID; LoadPercentage = $_.LoadPercentage } }
			
		}`
					   -CompletedScript {
			Param ($Job)
			$cpu = Receive-Job -Job $Job
			[array]$val = $cpu | Select -ExpandProperty LoadPercentage
			if ($script:set_form -eq $true)
			{
				Set-Width -Count $val.Count
				Set-Position
				Set-Visible
				$script:set_form = $false
				$labelMEM.ForeColor = $script:forecolor
				for ($i = 0; $i -lt $val.Count; $i++)
				{ iex ('$labelCPU' + $i + ".ForeColor = '" + $script:forecolor + "'") }
			}
			for ($i = 0; $i -lt $val.Count; $i++)
			{
				if ($val[$i] -gt $script:cpu_ts)
				{
					iex ('$labelCPU' + $i + "_Value.ForeColor = 'Red'")
				}
				else
				{ iex ('$labelCPU' + $i + "_Value.ForeColor = '" + $script:forecolor + "'") }
				iex ('$labelCPU' + $i + '_Value.Text = $val[' + $i + ']')
			}
		} -ArgumentList $script:computername
		[gc]::Collect()
	}
	
	$timer_mem_Tick = {
		Add-JobTracker -Name 'MEM' `
					   -JobScript {
			param ($computername)
			$wmi_mem = Get-WmiObject Win32_OperatingSystem -ComputerName $computername
			$wmi_mem | Select-Object @{ Name = 'Mem'; Expression = { '{0:N2}' -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) } }
			
		}`
					   -CompletedScript {
			Param ($Job)
			$mem = Receive-Job -Job $Job
			$val = $mem | Select -ExpandProperty Mem
			if (([Double]::Parse($val) -as [int]) -gt $script:mem_ts)
			{ $labelMEM_Value.ForeColor = 'Red' }
			else
			{ $labelMEM_Value.ForeColor = $script:forecolor }
			$labelMEM_Value.Text = $mem | Select -ExpandProperty Mem
		} -ArgumentList $script:computername
		[gc]::Collect()
	}
	
	$form_FadeInLoad = {
		$timer_cpu.Interval = $script:interval
		$timer_mem.Interval = $script:interval
		$timer_cpu.Start()
		$timer_mem.Start()
		$notifyicon.Icon = [System.Drawing.Icon]::FromHandle(($imagelist.Images[0]).GetHicon())
		$timerFadeIn.Start()
		$MainForm.Opacity = 0
		$labelInitializing.ForeColor = $script:forecolor
		$labelpc.ForeColor = $script:forecolor
		$MainForm.TopMost = $script:topmost
		$labelpc.Text = $script:computername
		$labelpc.Visible = $script:showpc
		if ($MainForm.TopMost -eq $false)
		{ $onTopToolStripMenuItem.Checked = $false }
	}
	
	$timerFadeIn_Tick = {
		if ($MainForm.Opacity -lt 1)
		{
			$MainForm.Opacity += 0.1
			
			if ($MainForm.Opacity -ge 1)
			{
				$timerFadeIn.Stop()
			}
		}
		[gc]::Collect()
	}
	$onTopToolStripMenuItem_Click = {
		if ($MainForm.TopMost -eq $true)
		{
			$MainForm.TopMost = $false
			$this.Checked = $false
		}
		else
		{
			$MainForm.TopMost = $true
			$this.Checked = $true
		}
	}
	$closeToolStripMenuItem_Click = {
		$notifyicon.Visible = $false
		$notifyicon.Dispose()
		$MainForm.Close()
	}
	
	$ReleaseLockToolStripMenuItem_Click = {
		if ($this.Text -eq 'Release Form')
		{
			$this.Text = 'Lock Form'
			$MainForm.BackColor = 'Control'
			$MainForm.FormBorderStyle = 'FixedToolWindow'
		}
		else
		{
			$this.Text = 'Release Form'
			$MainForm.BackColor = 'ControlText'
			$MainForm.FormBorderStyle = 'None'
		}
	}
	
	$showValuesToolStripMenuItem_Click = {
		$script:conf_values = New-Object PSObject -ArgumentList @{
			'Memory Threshold' = $script:mem_ts
			'CPU Threshold' = $script:cpu_ts
			'Top Most' = $script:topmost
			'Computer Name' = $script:computername
			'Show Computer Name' = $script:showpc
			'Refresh Interval' = $script:interval
			'Fore Color' = $script:forecolor
		}
		Call-DGW_psf -Configuration $script:conf_values
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$MainForm.remove_FormClosed($formMain_FormClosed)
			$MainForm.remove_Load($form_FadeInLoad)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$timer_cpu.remove_Tick($timer_cpu_Tick)
			$timer_mem.remove_Tick($timer_mem_Tick)
			$timerFadeIn.remove_Tick($timerFadeIn_Tick)
			$onTopToolStripMenuItem.remove_Click($onTopToolStripMenuItem_Click)
			$closeToolStripMenuItem.remove_Click($closeToolStripMenuItem_Click)
			$releaseLockToolStripMenuItem.remove_Click($ReleaseLockToolStripMenuItem_Click)
			$showValuesToolStripMenuItem.remove_Click($showValuesToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($labelpc)
	$MainForm.Controls.Add($labelInitializing)
	$MainForm.Controls.Add($labelCPU7_Value)
	$MainForm.Controls.Add($labelCPU7)
	$MainForm.Controls.Add($labelCPU6_Value)
	$MainForm.Controls.Add($labelCPU6)
	$MainForm.Controls.Add($labelCPU5_Value)
	$MainForm.Controls.Add($labelCPU5)
	$MainForm.Controls.Add($labelCPU4_Value)
	$MainForm.Controls.Add($labelCPU4)
	$MainForm.Controls.Add($labelCPU3_Value)
	$MainForm.Controls.Add($labelCPU3)
	$MainForm.Controls.Add($labelCPU2_Value)
	$MainForm.Controls.Add($labelCPU2)
	$MainForm.Controls.Add($labelCPU1_Value)
	$MainForm.Controls.Add($labelCPU1)
	$MainForm.Controls.Add($labelMEM_Value)
	$MainForm.Controls.Add($labelCPU0_Value)
	$MainForm.Controls.Add($labelCPU0)
	$MainForm.Controls.Add($labelMEM)
	$MainForm.BackColor = 'ControlText'
	$MainForm.ClientSize = '200, 85'
	$MainForm.ContextMenuStrip = $contextmenustrip
	$MainForm.ControlBox = $False
	$MainForm.FormBorderStyle = 'None'
	$MainForm.Name = "MainForm"
	$MainForm.ShowIcon = $False
	$MainForm.ShowInTaskbar = $False
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "CPU_MEM_TRACKER"
	$MainForm.TransparencyKey = 'ControlText'
	$MainForm.add_FormClosed($formMain_FormClosed)
	$MainForm.add_Load($form_FadeInLoad)
	#
	# labelpc
	#
	$labelpc.Dock = 'Top'
	$labelpc.FlatStyle = 'Flat'
	$labelpc.ForeColor = 'ControlLightLight'
	$labelpc.Location = '0, 0'
	$labelpc.Name = "labelpc"
	$labelpc.Size = '200, 18'
	$labelpc.TabIndex = 21
	$labelpc.TextAlign = 'MiddleCenter'
	$labelpc.Visible = $False
	#
	# labelInitializing
	#
	$labelInitializing.Dock = 'Fill'
	$labelInitializing.FlatStyle = 'Flat'
	$labelInitializing.Font = "Courier New, 15.75pt, style=Bold, Italic"
	$labelInitializing.ForeColor = 'ControlLightLight'
	$labelInitializing.Location = '0, 0'
	$labelInitializing.Name = "labelInitializing"
	$labelInitializing.Size = '200, 85'
	$labelInitializing.TabIndex = 19
	$labelInitializing.Text = "Initializing.."
	$labelInitializing.TextAlign = 'MiddleCenter'
	#
	# labelCPU7_Value
	#
	$labelCPU7_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU7_Value.ForeColor = 'ControlLightLight'
	$labelCPU7_Value.Location = '801, 43'
	$labelCPU7_Value.Name = "labelCPU7_Value"
	$labelCPU7_Value.Size = '95, 35'
	$labelCPU7_Value.TabIndex = 17
	$labelCPU7_Value.TextAlign = 'MiddleCenter'
	$labelCPU7_Value.Visible = $False
	#
	# labelCPU7
	#
	$labelCPU7.FlatStyle = 'Flat'
	$labelCPU7.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU7.ForeColor = 'ControlLightLight'
	$labelCPU7.Location = '801, 13'
	$labelCPU7.Name = "labelCPU7"
	$labelCPU7.Size = '95, 30'
	$labelCPU7.TabIndex = 16
	$labelCPU7.Text = "CPU7%"
	$labelCPU7.TextAlign = 'MiddleCenter'
	$labelCPU7.Visible = $False
	#
	# labelCPU6_Value
	#
	$labelCPU6_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU6_Value.ForeColor = 'ControlLightLight'
	$labelCPU6_Value.Location = '700, 42'
	$labelCPU6_Value.Name = "labelCPU6_Value"
	$labelCPU6_Value.Size = '95, 35'
	$labelCPU6_Value.TabIndex = 15
	$labelCPU6_Value.TextAlign = 'MiddleCenter'
	$labelCPU6_Value.Visible = $False
	#
	# labelCPU6
	#
	$labelCPU6.FlatStyle = 'Flat'
	$labelCPU6.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU6.ForeColor = 'ControlLightLight'
	$labelCPU6.Location = '700, 12'
	$labelCPU6.Name = "labelCPU6"
	$labelCPU6.Size = '95, 30'
	$labelCPU6.TabIndex = 14
	$labelCPU6.Text = "CPU6%"
	$labelCPU6.TextAlign = 'MiddleCenter'
	$labelCPU6.Visible = $False
	#
	# labelCPU5_Value
	#
	$labelCPU5_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU5_Value.ForeColor = 'ControlLightLight'
	$labelCPU5_Value.Location = '601, 42'
	$labelCPU5_Value.Name = "labelCPU5_Value"
	$labelCPU5_Value.Size = '95, 35'
	$labelCPU5_Value.TabIndex = 13
	$labelCPU5_Value.TextAlign = 'MiddleCenter'
	$labelCPU5_Value.Visible = $False
	#
	# labelCPU5
	#
	$labelCPU5.FlatStyle = 'Flat'
	$labelCPU5.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU5.ForeColor = 'ControlLightLight'
	$labelCPU5.Location = '601, 12'
	$labelCPU5.Name = "labelCPU5"
	$labelCPU5.Size = '95, 30'
	$labelCPU5.TabIndex = 12
	$labelCPU5.Text = "CPU5%"
	$labelCPU5.TextAlign = 'MiddleCenter'
	$labelCPU5.Visible = $False
	#
	# labelCPU4_Value
	#
	$labelCPU4_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU4_Value.ForeColor = 'ControlLightLight'
	$labelCPU4_Value.Location = '500, 42'
	$labelCPU4_Value.Name = "labelCPU4_Value"
	$labelCPU4_Value.Size = '95, 35'
	$labelCPU4_Value.TabIndex = 11
	$labelCPU4_Value.TextAlign = 'MiddleCenter'
	$labelCPU4_Value.Visible = $False
	#
	# labelCPU4
	#
	$labelCPU4.FlatStyle = 'Flat'
	$labelCPU4.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU4.ForeColor = 'ControlLightLight'
	$labelCPU4.Location = '500, 12'
	$labelCPU4.Name = "labelCPU4"
	$labelCPU4.Size = '95, 30'
	$labelCPU4.TabIndex = 10
	$labelCPU4.Text = "CPU4%"
	$labelCPU4.TextAlign = 'MiddleCenter'
	$labelCPU4.Visible = $False
	#
	# labelCPU3_Value
	#
	$labelCPU3_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU3_Value.ForeColor = 'ControlLightLight'
	$labelCPU3_Value.Location = '399, 42'
	$labelCPU3_Value.Name = "labelCPU3_Value"
	$labelCPU3_Value.Size = '95, 35'
	$labelCPU3_Value.TabIndex = 9
	$labelCPU3_Value.TextAlign = 'MiddleCenter'
	$labelCPU3_Value.Visible = $False
	#
	# labelCPU3
	#
	$labelCPU3.FlatStyle = 'Flat'
	$labelCPU3.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU3.ForeColor = 'ControlLightLight'
	$labelCPU3.Location = '399, 12'
	$labelCPU3.Name = "labelCPU3"
	$labelCPU3.Size = '95, 30'
	$labelCPU3.TabIndex = 8
	$labelCPU3.Text = "CPU3%"
	$labelCPU3.TextAlign = 'MiddleCenter'
	$labelCPU3.Visible = $False
	#
	# labelCPU2_Value
	#
	$labelCPU2_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU2_Value.ForeColor = 'ControlLightLight'
	$labelCPU2_Value.Location = '298, 42'
	$labelCPU2_Value.Name = "labelCPU2_Value"
	$labelCPU2_Value.Size = '95, 35'
	$labelCPU2_Value.TabIndex = 7
	$labelCPU2_Value.TextAlign = 'MiddleCenter'
	$labelCPU2_Value.Visible = $False
	#
	# labelCPU2
	#
	$labelCPU2.FlatStyle = 'Flat'
	$labelCPU2.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU2.ForeColor = 'ControlLightLight'
	$labelCPU2.Location = '298, 12'
	$labelCPU2.Name = "labelCPU2"
	$labelCPU2.Size = '95, 30'
	$labelCPU2.TabIndex = 6
	$labelCPU2.Text = "CPU2%"
	$labelCPU2.TextAlign = 'MiddleCenter'
	$labelCPU2.Visible = $False
	#
	# labelCPU1_Value
	#
	$labelCPU1_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU1_Value.ForeColor = 'ControlLightLight'
	$labelCPU1_Value.Location = '197, 42'
	$labelCPU1_Value.Name = "labelCPU1_Value"
	$labelCPU1_Value.Size = '95, 35'
	$labelCPU1_Value.TabIndex = 5
	$labelCPU1_Value.TextAlign = 'MiddleCenter'
	$labelCPU1_Value.Visible = $False
	#
	# labelCPU1
	#
	$labelCPU1.FlatStyle = 'Flat'
	$labelCPU1.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU1.ForeColor = 'ControlLightLight'
	$labelCPU1.Location = '197, 12'
	$labelCPU1.Name = "labelCPU1"
	$labelCPU1.Size = '95, 30'
	$labelCPU1.TabIndex = 4
	$labelCPU1.Text = "CPU1%"
	$labelCPU1.TextAlign = 'MiddleCenter'
	$labelCPU1.Visible = $False
	#
	# labelMEM_Value
	#
	$labelMEM_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelMEM_Value.ForeColor = 'ControlLightLight'
	$labelMEM_Value.Location = '5, 42'
	$labelMEM_Value.Name = "labelMEM_Value"
	$labelMEM_Value.Size = '85, 35'
	$labelMEM_Value.TabIndex = 3
	$labelMEM_Value.TextAlign = 'MiddleCenter'
	$labelMEM_Value.Visible = $False
	#
	# labelCPU0_Value
	#
	$labelCPU0_Value.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU0_Value.ForeColor = 'ControlLightLight'
	$labelCPU0_Value.Location = '96, 42'
	$labelCPU0_Value.Name = "labelCPU0_Value"
	$labelCPU0_Value.Size = '95, 35'
	$labelCPU0_Value.TabIndex = 2
	$labelCPU0_Value.TextAlign = 'MiddleCenter'
	$labelCPU0_Value.Visible = $False
	#
	# labelCPU0
	#
	$labelCPU0.FlatStyle = 'Flat'
	$labelCPU0.Font = "Courier New, 15.75pt, style=Bold"
	$labelCPU0.ForeColor = 'ControlLightLight'
	$labelCPU0.Location = '96, 12'
	$labelCPU0.Name = "labelCPU0"
	$labelCPU0.Size = '95, 30'
	$labelCPU0.TabIndex = 1
	$labelCPU0.Text = "CPU0%"
	$labelCPU0.TextAlign = 'MiddleCenter'
	$labelCPU0.Visible = $False
	#
	# labelMEM
	#
	$labelMEM.FlatStyle = 'Flat'
	$labelMEM.Font = "Courier New, 15.75pt, style=Bold"
	$labelMEM.ForeColor = 'ControlLightLight'
	$labelMEM.Location = '5, 12'
	$labelMEM.Name = "labelMEM"
	$labelMEM.Size = '85, 30'
	$labelMEM.TabIndex = 0
	$labelMEM.Text = "MEM%"
	$labelMEM.TextAlign = 'MiddleCenter'
	$labelMEM.Visible = $False
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# timer_cpu
	#
	$timer_cpu.add_Tick($timer_cpu_Tick)
	#
	# timer_mem
	#
	$timer_mem.add_Tick($timer_mem_Tick)
	#
	# timerFadeIn
	#
	$timerFadeIn.add_Tick($timerFadeIn_Tick)
	#
	# notifyicon
	#
	$notifyicon.ContextMenuStrip = $contextmenustrip
	$notifyicon.Text = "CPU and Memory Usage Tracker"
	$notifyicon.Visible = $True
	#
	# contextmenustrip
	#
	[void]$contextmenustrip.Items.Add($onTopToolStripMenuItem)
	[void]$contextmenustrip.Items.Add($toolstripseparator2)
	[void]$contextmenustrip.Items.Add($releaseLockToolStripMenuItem)
	[void]$contextmenustrip.Items.Add($toolstripseparator1)
	[void]$contextmenustrip.Items.Add($showValuesToolStripMenuItem)
	[void]$contextmenustrip.Items.Add($toolstripseparator3)
	[void]$contextmenustrip.Items.Add($closeToolStripMenuItem)
	$contextmenustrip.Name = "contextmenustrip"
	$contextmenustrip.Size = '155, 110'
	#
	# onTopToolStripMenuItem
	#
	$onTopToolStripMenuItem.Checked = $True
	$onTopToolStripMenuItem.CheckState = 'Checked'
	$onTopToolStripMenuItem.Name = "onTopToolStripMenuItem"
	$onTopToolStripMenuItem.Size = '154, 22'
	$onTopToolStripMenuItem.Text = "Always On Top"
	$onTopToolStripMenuItem.add_Click($onTopToolStripMenuItem_Click)
	#
	# closeToolStripMenuItem
	#
	$closeToolStripMenuItem.Name = "closeToolStripMenuItem"
	$closeToolStripMenuItem.Size = '154, 22'
	$closeToolStripMenuItem.Text = "Close Form"
	$closeToolStripMenuItem.add_Click($closeToolStripMenuItem_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = "toolstripseparator1"
	$toolstripseparator1.Size = '151, 6'
	#
	# imagelist
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAA6CAAAAk1TRnQBSQFMAwEBAAE4AQABOAEAARABAAEQAQAE/wEJAQAI/wFCAU0BNgEE
BgABNgEEAgABKAMAAUADAAEQAwABAQEAAQgGAAEEGAABgAIAAYADAAKAAQABgAMAAYABAAGAAQAC
gAIAA8ABAAHAAdwBwAEAAfABygGmAQABMwUAATMBAAEzAQABMwEAAjMCAAMWAQADHAEAAyIBAAMp
AQADVQEAA00BAANCAQADOQEAAYABfAH/AQACUAH/AQABkwEAAdYBAAH/AewBzAEAAcYB1gHvAQAB
1gLnAQABkAGpAa0CAAH/ATMDAAFmAwABmQMAAcwCAAEzAwACMwIAATMBZgIAATMBmQIAATMBzAIA
ATMB/wIAAWYDAAFmATMCAAJmAgABZgGZAgABZgHMAgABZgH/AgABmQMAAZkBMwIAAZkBZgIAApkC
AAGZAcwCAAGZAf8CAAHMAwABzAEzAgABzAFmAgABzAGZAgACzAIAAcwB/wIAAf8BZgIAAf8BmQIA
Af8BzAEAATMB/wIAAf8BAAEzAQABMwEAAWYBAAEzAQABmQEAATMBAAHMAQABMwEAAf8BAAH/ATMC
AAMzAQACMwFmAQACMwGZAQACMwHMAQACMwH/AQABMwFmAgABMwFmATMBAAEzAmYBAAEzAWYBmQEA
ATMBZgHMAQABMwFmAf8BAAEzAZkCAAEzAZkBMwEAATMBmQFmAQABMwKZAQABMwGZAcwBAAEzAZkB
/wEAATMBzAIAATMBzAEzAQABMwHMAWYBAAEzAcwBmQEAATMCzAEAATMBzAH/AQABMwH/ATMBAAEz
Af8BZgEAATMB/wGZAQABMwH/AcwBAAEzAv8BAAFmAwABZgEAATMBAAFmAQABZgEAAWYBAAGZAQAB
ZgEAAcwBAAFmAQAB/wEAAWYBMwIAAWYCMwEAAWYBMwFmAQABZgEzAZkBAAFmATMBzAEAAWYBMwH/
AQACZgIAAmYBMwEAA2YBAAJmAZkBAAJmAcwBAAFmAZkCAAFmAZkBMwEAAWYBmQFmAQABZgKZAQAB
ZgGZAcwBAAFmAZkB/wEAAWYBzAIAAWYBzAEzAQABZgHMAZkBAAFmAswBAAFmAcwB/wEAAWYB/wIA
AWYB/wEzAQABZgH/AZkBAAFmAf8BzAEAAcwBAAH/AQAB/wEAAcwBAAKZAgABmQEzAZkBAAGZAQAB
mQEAAZkBAAHMAQABmQMAAZkCMwEAAZkBAAFmAQABmQEzAcwBAAGZAQAB/wEAAZkBZgIAAZkBZgEz
AQABmQEzAWYBAAGZAWYBmQEAAZkBZgHMAQABmQEzAf8BAAKZATMBAAKZAWYBAAOZAQACmQHMAQAC
mQH/AQABmQHMAgABmQHMATMBAAFmAcwBZgEAAZkBzAGZAQABmQLMAQABmQHMAf8BAAGZAf8CAAGZ
Af8BMwEAAZkBzAFmAQABmQH/AZkBAAGZAf8BzAEAAZkC/wEAAcwDAAGZAQABMwEAAcwBAAFmAQAB
zAEAAZkBAAHMAQABzAEAAZkBMwIAAcwCMwEAAcwBMwFmAQABzAEzAZkBAAHMATMBzAEAAcwBMwH/
AQABzAFmAgABzAFmATMBAAGZAmYBAAHMAWYBmQEAAcwBZgHMAQABmQFmAf8BAAHMAZkCAAHMAZkB
MwEAAcwBmQFmAQABzAKZAQABzAGZAcwBAAHMAZkB/wEAAswCAALMATMBAALMAWYBAALMAZkBAAPM
AQACzAH/AQABzAH/AgABzAH/ATMBAAGZAf8BZgEAAcwB/wGZAQABzAH/AcwBAAHMAv8BAAHMAQAB
MwEAAf8BAAFmAQAB/wEAAZkBAAHMATMCAAH/AjMBAAH/ATMBZgEAAf8BMwGZAQAB/wEzAcwBAAH/
ATMB/wEAAf8BZgIAAf8BZgEzAQABzAJmAQAB/wFmAZkBAAH/AWYBzAEAAcwBZgH/AQAB/wGZAgAB
/wGZATMBAAH/AZkBZgEAAf8CmQEAAf8BmQHMAQAB/wGZAf8BAAH/AcwCAAH/AcwBMwEAAf8BzAFm
AQAB/wHMAZkBAAH/AswBAAH/AcwB/wEAAv8BMwEAAcwB/wFmAQAC/wGZAQAC/wHMAQACZgH/AQAB
ZgH/AWYBAAFmAv8BAAH/AmYBAAH/AWYB/wEAAv8BZgEAASEBAAGlAQADXwEAA3cBAAOGAQADlgEA
A8sBAAOyAQAD1wEAA90BAAPjAQAD6gEAA/EBAAP4AQAB8AH7Af8BAAGkAqABAAOAAwAB/wIAAf8D
AAL/AQAB/wMAAf8BAAH/AQAC/wIAA/8FAAL/AfcB7AHtAfM4AAHvAQcBbQHvARAB6gEAAe0B7AH0
NgABQwHrARIDQwEAAQ4BEwHrAfcB/zQAARQFFQIAAQ8BQwH3Ae0B8wH/MgAGFAIAAQ4BQwEUARIB
/zMABhQCAAEOARABFAESAf8zAAITAhQB6AGtAwABDwEVARM0AAEUBRMBDgIAAQ4BQwEUNAABEgFt
ARQCEgETAgABQwEOAREBFDQAAhIB7AERAhIBAAERAgABEwEVNAAE6gHbAdUBDwMAARQBQzQAAREB
bQTqAwABEwEOARE0AAFtAewB7wG8Ae8C8AHrAgABDgEPNgAC8wHyAfEC8AIHAe8B7bIAAUIBTQE+
BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcAA/8BAAHwAT8GAAHAAQ8GAAHAAQMGAAHABwAB
wAEBBgABwAEBBgABwAEDBgABwAEDBgABwAEDBgABwAEDBgABwAEDBgABwAEDBgABwAEDBgAB8AED
BgAC/wYAAv8GAAs='))
	#endregion
	$imagelist.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist.TransparentColor = 'Transparent'
	#
	# releaseLockToolStripMenuItem
	#
	$releaseLockToolStripMenuItem.Name = "releaseLockToolStripMenuItem"
	$releaseLockToolStripMenuItem.Size = '154, 22'
	$releaseLockToolStripMenuItem.Text = "Release Form"
	$releaseLockToolStripMenuItem.add_Click($ReleaseLockToolStripMenuItem_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = "toolstripseparator2"
	$toolstripseparator2.Size = '151, 6'
	#
	# showValuesToolStripMenuItem
	#
	$showValuesToolStripMenuItem.Name = "showValuesToolStripMenuItem"
	$showValuesToolStripMenuItem.Size = '154, 22'
	$showValuesToolStripMenuItem.Text = "Show Values"
	$showValuesToolStripMenuItem.add_Click($showValuesToolStripMenuItem_Click)
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = "toolstripseparator3"
	$toolstripseparator3.Size = '151, 6'
	$MainForm.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	$global:ErrorActionPreference = 'SilentlyContinue'
	$script:set_form = $true
	
	function Set-CommandLineParameters
	{
		if ($script:Dictionary["memts"] -ne $null -and $script:Dictionary["memts"] -ne '' -and (0..100) -contains $script:Dictionary["memts"]) { $script:mem_ts = $script:Dictionary["memts"] }
		else { $script:mem_ts = 50 }
		if ($script:Dictionary["cputs"] -ne $null -and $script:Dictionary["cputs"] -ne '' -and (0..100) -contains $script:Dictionary["cputs"]) { $script:cpu_ts = $script:Dictionary["cputs"] }
		else { $script:cpu_ts = 50 }
		if ($script:Dictionary["tm"] -ne $null -and $script:Dictionary["tm"] -ne '' -and ($true, $false) -contains $script:Dictionary["tm"]) { $script:topmost = $script:Dictionary["tm"] }
		else { $script:topmost = $true }
		if ($script:Dictionary["pc"] -ne $null -and $script:Dictionary["pc"] -ne '' -and (Test-Connection -ComputerName $script:Dictionary["pc"] -Count 1 -Quiet) -eq $true) { $script:computername = $script:Dictionary["pc"] }
		else { $script:computername = $env:COMPUTERNAME }
		if ($script:Dictionary["ref"] -ne $null -and $script:Dictionary["ref"] -ne '' -and (1000..60000) -contains $script:Dictionary["ref"]) { $script:interval = $script:Dictionary["ref"] }
		else { $script:interval = 3000 }
		if ($script:Dictionary["fc"] -ne $null -and $script:Dictionary["fc"] -ne '' -and ($script:Dictionary["fc"] -as [System.Drawing.KnownColor]) -ne $null) { $script:forecolor = $script:Dictionary["fc"] }
		else { $script:forecolor = 'ControlLightLight' }
		if ($script:Dictionary["showpc"] -ne $null -and $script:Dictionary["showpc"] -ne '' -and ($true, $false) -contains $script:Dictionary["showpc"]) { $script:showpc = $script:Dictionary["showpc"] }
		else { $script:showpc = $false }
	}
	
	function Set-Width
	{
		param ([int]$Count)
		$width = (1 + $Count) * 100
		$MainForm.Size = New-Object System.Drawing.Size($width, 80)
	}
	
	function Set-Position
	{
		$MainForm.StartPosition = 'Manual'
		$bounds = [System.Windows.Forms.Screen]::AllScreens[0].WorkingArea
		$MainForm.Top = ($bounds | Select -ExpandProperty Height) - $MainForm.Size.Height
		$MainForm.Left = ($bounds  | Select -ExpandProperty Width) - $MainForm.Size.Width
	}
	
	function Set-Visible
	{
		0..7 | % {
			iex ('$labelCPU' + $_ + '.Visible = $true')
			iex ('$labelCPU' + $_ + '_Value.Visible = $true')
		}
		$labelMEM.Visible = $true
		$labelMEM_Value.Visible = $true
		$labelInitializing.Visible = $false
	}
	
	function Parse-Commandline
	{
		
		[OutputType([System.Collections.Specialized.StringCollection])]
		Param ([string]$CommandLine)
		
		$Arguments = New-Object System.Collections.Specialized.StringCollection
		
		if ($CommandLine)
		{
			$index = $CommandLine.IndexOf('"')
			
			while ($index -ne -1)
			{
				$closeIndex = $CommandLine.IndexOf('"', $index + 1)
				if ($closeIndex -eq -1)
				{
					break
				}
				$value = $CommandLine.Substring($index + 1, $closeIndex – ($index + 1))
				[void]$Arguments.Add($value)
				$index = $closeIndex
				
				$index = $CommandLine.IndexOf('"', $index + 1)
			}
		}
		return $Arguments
	}
	
	function Convert-CommandLineToDictionary
	{
		Param ([ValidateNotNull()]
			[System.Collections.Specialized.StringDictionary]$Dictionary,
			[string]$CommandLine,
			[char] $ParamIndicator)
		
		$Params = Parse-Commandline $CommandLine
		
		for ($index = 0; $index -lt $Params.Count; $index++)
		{
			[string]$param = $Params[$index]
			$key = ""
			$value = ""
			
			if ($param.StartsWith($ParamIndicator))
			{
				$key = $param.Remove(0, 1)
				if ($index + 1 -lt $Params.Count)
				{
					[string]$param = $Params[$index + 1]
					if ($param.StartsWith($ParamIndicator) -ne $true)
					{
						$value = $param
						$index++
					}
				}
				$Dictionary[$key] = $value
			}
		}
	}#endregion Source: Globals.ps1

#region Source: DGW.psf
function Call-DGW_psf
{
param ($Configuration)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formConfiguration = New-Object 'System.Windows.Forms.Form'
	$datagridview = New-Object 'System.Windows.Forms.DataGridView'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formConfiguration_Load = {
		$processarray = New-Object System.Collections.ArrayList
		$processarray.AddRange($Configuration)
		$datagridview.DataSource = $processarray
	}
	
	$datagridview_DataError = [System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formConfiguration.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridview.remove_DataError($datagridview_DataError)
			$formConfiguration.remove_Load($formConfiguration_Load)
			$formConfiguration.remove_Load($Form_StateCorrection_Load)
			$formConfiguration.remove_Closing($Form_StoreValues_Closing)
			$formConfiguration.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formConfiguration.SuspendLayout()
	#
	# formConfiguration
	#
	$formConfiguration.Controls.Add($datagridview)
	$formConfiguration.ClientSize = '274, 176'
	$formConfiguration.FormBorderStyle = 'FixedToolWindow'
	$formConfiguration.Name = "formConfiguration"
	$formConfiguration.ShowIcon = $False
	$formConfiguration.ShowInTaskbar = $False
	$formConfiguration.StartPosition = 'CenterScreen'
	$formConfiguration.Text = "Configuration"
	$formConfiguration.TopMost = $True
	$formConfiguration.add_Load($formConfiguration_Load)
	#
	# datagridview
	#
	$datagridview.AllowUserToAddRows = $False
	$datagridview.AllowUserToDeleteRows = $False
	$datagridview.AllowUserToOrderColumns = $True
	$datagridview.AllowUserToResizeColumns = $False
	$datagridview.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = '224, 224, 224'
	$datagridview.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview.AutoSizeColumnsMode = 'Fill'
	$datagridview.AutoSizeRowsMode = 'AllCells'
	$datagridview.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview.Dock = 'Fill'
	$datagridview.Location = '0, 0'
	$datagridview.Name = "datagridview"
	$datagridview.ReadOnly = $True
	$datagridview.RowHeadersVisible = $False
	$datagridview.SelectionMode = 'FullRowSelect'
	$datagridview.Size = '274, 176'
	$datagridview.TabIndex = 0
	$datagridview.add_DataError($datagridview_DataError)
	$formConfiguration.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formConfiguration.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formConfiguration.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formConfiguration.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formConfiguration.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formConfiguration.ShowDialog()
}
#endregion Source: DGW.psf

#Start the application
Main ($CommandLine)
